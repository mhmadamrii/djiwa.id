
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Wishlist` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Wishlist
 * 
 */
export type WishlistModel = runtime.Types.Result.DefaultSelection<Prisma.$WishlistPayload>

export type AggregateWishlist = {
  _count: WishlistCountAggregateOutputType | null
  _min: WishlistMinAggregateOutputType | null
  _max: WishlistMaxAggregateOutputType | null
}

export type WishlistMinAggregateOutputType = {
  id: string | null
  userId: string | null
  jewerlyAssetId: string | null
  created_at: Date | null
}

export type WishlistMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  jewerlyAssetId: string | null
  created_at: Date | null
}

export type WishlistCountAggregateOutputType = {
  id: number
  userId: number
  jewerlyAssetId: number
  created_at: number
  _all: number
}


export type WishlistMinAggregateInputType = {
  id?: true
  userId?: true
  jewerlyAssetId?: true
  created_at?: true
}

export type WishlistMaxAggregateInputType = {
  id?: true
  userId?: true
  jewerlyAssetId?: true
  created_at?: true
}

export type WishlistCountAggregateInputType = {
  id?: true
  userId?: true
  jewerlyAssetId?: true
  created_at?: true
  _all?: true
}

export type WishlistAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Wishlist to aggregate.
   */
  where?: Prisma.WishlistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Wishlists to fetch.
   */
  orderBy?: Prisma.WishlistOrderByWithRelationInput | Prisma.WishlistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WishlistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Wishlists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Wishlists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Wishlists
  **/
  _count?: true | WishlistCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WishlistMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WishlistMaxAggregateInputType
}

export type GetWishlistAggregateType<T extends WishlistAggregateArgs> = {
      [P in keyof T & keyof AggregateWishlist]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWishlist[P]>
    : Prisma.GetScalarType<T[P], AggregateWishlist[P]>
}




export type WishlistGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WishlistWhereInput
  orderBy?: Prisma.WishlistOrderByWithAggregationInput | Prisma.WishlistOrderByWithAggregationInput[]
  by: Prisma.WishlistScalarFieldEnum[] | Prisma.WishlistScalarFieldEnum
  having?: Prisma.WishlistScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WishlistCountAggregateInputType | true
  _min?: WishlistMinAggregateInputType
  _max?: WishlistMaxAggregateInputType
}

export type WishlistGroupByOutputType = {
  id: string
  userId: string
  jewerlyAssetId: string
  created_at: Date
  _count: WishlistCountAggregateOutputType | null
  _min: WishlistMinAggregateOutputType | null
  _max: WishlistMaxAggregateOutputType | null
}

type GetWishlistGroupByPayload<T extends WishlistGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WishlistGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WishlistGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WishlistGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WishlistGroupByOutputType[P]>
      }
    >
  > 



export type WishlistWhereInput = {
  AND?: Prisma.WishlistWhereInput | Prisma.WishlistWhereInput[]
  OR?: Prisma.WishlistWhereInput[]
  NOT?: Prisma.WishlistWhereInput | Prisma.WishlistWhereInput[]
  id?: Prisma.StringFilter<"Wishlist"> | string
  userId?: Prisma.StringFilter<"Wishlist"> | string
  jewerlyAssetId?: Prisma.StringFilter<"Wishlist"> | string
  created_at?: Prisma.DateTimeFilter<"Wishlist"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  jewerlyAsset?: Prisma.XOR<Prisma.JewerlyAssetScalarRelationFilter, Prisma.JewerlyAssetWhereInput>
}

export type WishlistOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  jewerlyAssetId?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  jewerlyAsset?: Prisma.JewerlyAssetOrderByWithRelationInput
}

export type WishlistWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId_jewerlyAssetId?: Prisma.WishlistUserIdJewerlyAssetIdCompoundUniqueInput
  AND?: Prisma.WishlistWhereInput | Prisma.WishlistWhereInput[]
  OR?: Prisma.WishlistWhereInput[]
  NOT?: Prisma.WishlistWhereInput | Prisma.WishlistWhereInput[]
  userId?: Prisma.StringFilter<"Wishlist"> | string
  jewerlyAssetId?: Prisma.StringFilter<"Wishlist"> | string
  created_at?: Prisma.DateTimeFilter<"Wishlist"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  jewerlyAsset?: Prisma.XOR<Prisma.JewerlyAssetScalarRelationFilter, Prisma.JewerlyAssetWhereInput>
}, "id" | "userId_jewerlyAssetId">

export type WishlistOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  jewerlyAssetId?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  _count?: Prisma.WishlistCountOrderByAggregateInput
  _max?: Prisma.WishlistMaxOrderByAggregateInput
  _min?: Prisma.WishlistMinOrderByAggregateInput
}

export type WishlistScalarWhereWithAggregatesInput = {
  AND?: Prisma.WishlistScalarWhereWithAggregatesInput | Prisma.WishlistScalarWhereWithAggregatesInput[]
  OR?: Prisma.WishlistScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WishlistScalarWhereWithAggregatesInput | Prisma.WishlistScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Wishlist"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Wishlist"> | string
  jewerlyAssetId?: Prisma.StringWithAggregatesFilter<"Wishlist"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"Wishlist"> | Date | string
}

export type WishlistCreateInput = {
  id?: string
  created_at?: Date | string
  user: Prisma.UserCreateNestedOneWithoutWishlistInput
  jewerlyAsset: Prisma.JewerlyAssetCreateNestedOneWithoutWishlistInput
}

export type WishlistUncheckedCreateInput = {
  id?: string
  userId: string
  jewerlyAssetId: string
  created_at?: Date | string
}

export type WishlistUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutWishlistNestedInput
  jewerlyAsset?: Prisma.JewerlyAssetUpdateOneRequiredWithoutWishlistNestedInput
}

export type WishlistUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  jewerlyAssetId?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WishlistCreateManyInput = {
  id?: string
  userId: string
  jewerlyAssetId: string
  created_at?: Date | string
}

export type WishlistUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WishlistUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  jewerlyAssetId?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WishlistListRelationFilter = {
  every?: Prisma.WishlistWhereInput
  some?: Prisma.WishlistWhereInput
  none?: Prisma.WishlistWhereInput
}

export type WishlistOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WishlistUserIdJewerlyAssetIdCompoundUniqueInput = {
  userId: string
  jewerlyAssetId: string
}

export type WishlistCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  jewerlyAssetId?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type WishlistMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  jewerlyAssetId?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type WishlistMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  jewerlyAssetId?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type WishlistCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.WishlistCreateWithoutUserInput, Prisma.WishlistUncheckedCreateWithoutUserInput> | Prisma.WishlistCreateWithoutUserInput[] | Prisma.WishlistUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WishlistCreateOrConnectWithoutUserInput | Prisma.WishlistCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.WishlistCreateManyUserInputEnvelope
  connect?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
}

export type WishlistUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.WishlistCreateWithoutUserInput, Prisma.WishlistUncheckedCreateWithoutUserInput> | Prisma.WishlistCreateWithoutUserInput[] | Prisma.WishlistUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WishlistCreateOrConnectWithoutUserInput | Prisma.WishlistCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.WishlistCreateManyUserInputEnvelope
  connect?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
}

export type WishlistUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.WishlistCreateWithoutUserInput, Prisma.WishlistUncheckedCreateWithoutUserInput> | Prisma.WishlistCreateWithoutUserInput[] | Prisma.WishlistUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WishlistCreateOrConnectWithoutUserInput | Prisma.WishlistCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.WishlistUpsertWithWhereUniqueWithoutUserInput | Prisma.WishlistUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.WishlistCreateManyUserInputEnvelope
  set?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
  disconnect?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
  delete?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
  connect?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
  update?: Prisma.WishlistUpdateWithWhereUniqueWithoutUserInput | Prisma.WishlistUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.WishlistUpdateManyWithWhereWithoutUserInput | Prisma.WishlistUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.WishlistScalarWhereInput | Prisma.WishlistScalarWhereInput[]
}

export type WishlistUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.WishlistCreateWithoutUserInput, Prisma.WishlistUncheckedCreateWithoutUserInput> | Prisma.WishlistCreateWithoutUserInput[] | Prisma.WishlistUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WishlistCreateOrConnectWithoutUserInput | Prisma.WishlistCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.WishlistUpsertWithWhereUniqueWithoutUserInput | Prisma.WishlistUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.WishlistCreateManyUserInputEnvelope
  set?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
  disconnect?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
  delete?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
  connect?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
  update?: Prisma.WishlistUpdateWithWhereUniqueWithoutUserInput | Prisma.WishlistUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.WishlistUpdateManyWithWhereWithoutUserInput | Prisma.WishlistUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.WishlistScalarWhereInput | Prisma.WishlistScalarWhereInput[]
}

export type WishlistCreateNestedManyWithoutJewerlyAssetInput = {
  create?: Prisma.XOR<Prisma.WishlistCreateWithoutJewerlyAssetInput, Prisma.WishlistUncheckedCreateWithoutJewerlyAssetInput> | Prisma.WishlistCreateWithoutJewerlyAssetInput[] | Prisma.WishlistUncheckedCreateWithoutJewerlyAssetInput[]
  connectOrCreate?: Prisma.WishlistCreateOrConnectWithoutJewerlyAssetInput | Prisma.WishlistCreateOrConnectWithoutJewerlyAssetInput[]
  createMany?: Prisma.WishlistCreateManyJewerlyAssetInputEnvelope
  connect?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
}

export type WishlistUncheckedCreateNestedManyWithoutJewerlyAssetInput = {
  create?: Prisma.XOR<Prisma.WishlistCreateWithoutJewerlyAssetInput, Prisma.WishlistUncheckedCreateWithoutJewerlyAssetInput> | Prisma.WishlistCreateWithoutJewerlyAssetInput[] | Prisma.WishlistUncheckedCreateWithoutJewerlyAssetInput[]
  connectOrCreate?: Prisma.WishlistCreateOrConnectWithoutJewerlyAssetInput | Prisma.WishlistCreateOrConnectWithoutJewerlyAssetInput[]
  createMany?: Prisma.WishlistCreateManyJewerlyAssetInputEnvelope
  connect?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
}

export type WishlistUpdateManyWithoutJewerlyAssetNestedInput = {
  create?: Prisma.XOR<Prisma.WishlistCreateWithoutJewerlyAssetInput, Prisma.WishlistUncheckedCreateWithoutJewerlyAssetInput> | Prisma.WishlistCreateWithoutJewerlyAssetInput[] | Prisma.WishlistUncheckedCreateWithoutJewerlyAssetInput[]
  connectOrCreate?: Prisma.WishlistCreateOrConnectWithoutJewerlyAssetInput | Prisma.WishlistCreateOrConnectWithoutJewerlyAssetInput[]
  upsert?: Prisma.WishlistUpsertWithWhereUniqueWithoutJewerlyAssetInput | Prisma.WishlistUpsertWithWhereUniqueWithoutJewerlyAssetInput[]
  createMany?: Prisma.WishlistCreateManyJewerlyAssetInputEnvelope
  set?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
  disconnect?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
  delete?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
  connect?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
  update?: Prisma.WishlistUpdateWithWhereUniqueWithoutJewerlyAssetInput | Prisma.WishlistUpdateWithWhereUniqueWithoutJewerlyAssetInput[]
  updateMany?: Prisma.WishlistUpdateManyWithWhereWithoutJewerlyAssetInput | Prisma.WishlistUpdateManyWithWhereWithoutJewerlyAssetInput[]
  deleteMany?: Prisma.WishlistScalarWhereInput | Prisma.WishlistScalarWhereInput[]
}

export type WishlistUncheckedUpdateManyWithoutJewerlyAssetNestedInput = {
  create?: Prisma.XOR<Prisma.WishlistCreateWithoutJewerlyAssetInput, Prisma.WishlistUncheckedCreateWithoutJewerlyAssetInput> | Prisma.WishlistCreateWithoutJewerlyAssetInput[] | Prisma.WishlistUncheckedCreateWithoutJewerlyAssetInput[]
  connectOrCreate?: Prisma.WishlistCreateOrConnectWithoutJewerlyAssetInput | Prisma.WishlistCreateOrConnectWithoutJewerlyAssetInput[]
  upsert?: Prisma.WishlistUpsertWithWhereUniqueWithoutJewerlyAssetInput | Prisma.WishlistUpsertWithWhereUniqueWithoutJewerlyAssetInput[]
  createMany?: Prisma.WishlistCreateManyJewerlyAssetInputEnvelope
  set?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
  disconnect?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
  delete?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
  connect?: Prisma.WishlistWhereUniqueInput | Prisma.WishlistWhereUniqueInput[]
  update?: Prisma.WishlistUpdateWithWhereUniqueWithoutJewerlyAssetInput | Prisma.WishlistUpdateWithWhereUniqueWithoutJewerlyAssetInput[]
  updateMany?: Prisma.WishlistUpdateManyWithWhereWithoutJewerlyAssetInput | Prisma.WishlistUpdateManyWithWhereWithoutJewerlyAssetInput[]
  deleteMany?: Prisma.WishlistScalarWhereInput | Prisma.WishlistScalarWhereInput[]
}

export type WishlistCreateWithoutUserInput = {
  id?: string
  created_at?: Date | string
  jewerlyAsset: Prisma.JewerlyAssetCreateNestedOneWithoutWishlistInput
}

export type WishlistUncheckedCreateWithoutUserInput = {
  id?: string
  jewerlyAssetId: string
  created_at?: Date | string
}

export type WishlistCreateOrConnectWithoutUserInput = {
  where: Prisma.WishlistWhereUniqueInput
  create: Prisma.XOR<Prisma.WishlistCreateWithoutUserInput, Prisma.WishlistUncheckedCreateWithoutUserInput>
}

export type WishlistCreateManyUserInputEnvelope = {
  data: Prisma.WishlistCreateManyUserInput | Prisma.WishlistCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type WishlistUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.WishlistWhereUniqueInput
  update: Prisma.XOR<Prisma.WishlistUpdateWithoutUserInput, Prisma.WishlistUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.WishlistCreateWithoutUserInput, Prisma.WishlistUncheckedCreateWithoutUserInput>
}

export type WishlistUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.WishlistWhereUniqueInput
  data: Prisma.XOR<Prisma.WishlistUpdateWithoutUserInput, Prisma.WishlistUncheckedUpdateWithoutUserInput>
}

export type WishlistUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.WishlistScalarWhereInput
  data: Prisma.XOR<Prisma.WishlistUpdateManyMutationInput, Prisma.WishlistUncheckedUpdateManyWithoutUserInput>
}

export type WishlistScalarWhereInput = {
  AND?: Prisma.WishlistScalarWhereInput | Prisma.WishlistScalarWhereInput[]
  OR?: Prisma.WishlistScalarWhereInput[]
  NOT?: Prisma.WishlistScalarWhereInput | Prisma.WishlistScalarWhereInput[]
  id?: Prisma.StringFilter<"Wishlist"> | string
  userId?: Prisma.StringFilter<"Wishlist"> | string
  jewerlyAssetId?: Prisma.StringFilter<"Wishlist"> | string
  created_at?: Prisma.DateTimeFilter<"Wishlist"> | Date | string
}

export type WishlistCreateWithoutJewerlyAssetInput = {
  id?: string
  created_at?: Date | string
  user: Prisma.UserCreateNestedOneWithoutWishlistInput
}

export type WishlistUncheckedCreateWithoutJewerlyAssetInput = {
  id?: string
  userId: string
  created_at?: Date | string
}

export type WishlistCreateOrConnectWithoutJewerlyAssetInput = {
  where: Prisma.WishlistWhereUniqueInput
  create: Prisma.XOR<Prisma.WishlistCreateWithoutJewerlyAssetInput, Prisma.WishlistUncheckedCreateWithoutJewerlyAssetInput>
}

export type WishlistCreateManyJewerlyAssetInputEnvelope = {
  data: Prisma.WishlistCreateManyJewerlyAssetInput | Prisma.WishlistCreateManyJewerlyAssetInput[]
  skipDuplicates?: boolean
}

export type WishlistUpsertWithWhereUniqueWithoutJewerlyAssetInput = {
  where: Prisma.WishlistWhereUniqueInput
  update: Prisma.XOR<Prisma.WishlistUpdateWithoutJewerlyAssetInput, Prisma.WishlistUncheckedUpdateWithoutJewerlyAssetInput>
  create: Prisma.XOR<Prisma.WishlistCreateWithoutJewerlyAssetInput, Prisma.WishlistUncheckedCreateWithoutJewerlyAssetInput>
}

export type WishlistUpdateWithWhereUniqueWithoutJewerlyAssetInput = {
  where: Prisma.WishlistWhereUniqueInput
  data: Prisma.XOR<Prisma.WishlistUpdateWithoutJewerlyAssetInput, Prisma.WishlistUncheckedUpdateWithoutJewerlyAssetInput>
}

export type WishlistUpdateManyWithWhereWithoutJewerlyAssetInput = {
  where: Prisma.WishlistScalarWhereInput
  data: Prisma.XOR<Prisma.WishlistUpdateManyMutationInput, Prisma.WishlistUncheckedUpdateManyWithoutJewerlyAssetInput>
}

export type WishlistCreateManyUserInput = {
  id?: string
  jewerlyAssetId: string
  created_at?: Date | string
}

export type WishlistUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  jewerlyAsset?: Prisma.JewerlyAssetUpdateOneRequiredWithoutWishlistNestedInput
}

export type WishlistUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jewerlyAssetId?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WishlistUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jewerlyAssetId?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WishlistCreateManyJewerlyAssetInput = {
  id?: string
  userId: string
  created_at?: Date | string
}

export type WishlistUpdateWithoutJewerlyAssetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutWishlistNestedInput
}

export type WishlistUncheckedUpdateWithoutJewerlyAssetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WishlistUncheckedUpdateManyWithoutJewerlyAssetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type WishlistSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  jewerlyAssetId?: boolean
  created_at?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  jewerlyAsset?: boolean | Prisma.JewerlyAssetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["wishlist"]>

export type WishlistSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  jewerlyAssetId?: boolean
  created_at?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  jewerlyAsset?: boolean | Prisma.JewerlyAssetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["wishlist"]>

export type WishlistSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  jewerlyAssetId?: boolean
  created_at?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  jewerlyAsset?: boolean | Prisma.JewerlyAssetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["wishlist"]>

export type WishlistSelectScalar = {
  id?: boolean
  userId?: boolean
  jewerlyAssetId?: boolean
  created_at?: boolean
}

export type WishlistOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "jewerlyAssetId" | "created_at", ExtArgs["result"]["wishlist"]>
export type WishlistInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  jewerlyAsset?: boolean | Prisma.JewerlyAssetDefaultArgs<ExtArgs>
}
export type WishlistIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  jewerlyAsset?: boolean | Prisma.JewerlyAssetDefaultArgs<ExtArgs>
}
export type WishlistIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  jewerlyAsset?: boolean | Prisma.JewerlyAssetDefaultArgs<ExtArgs>
}

export type $WishlistPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Wishlist"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    jewerlyAsset: Prisma.$JewerlyAssetPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    jewerlyAssetId: string
    created_at: Date
  }, ExtArgs["result"]["wishlist"]>
  composites: {}
}

export type WishlistGetPayload<S extends boolean | null | undefined | WishlistDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WishlistPayload, S>

export type WishlistCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WishlistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WishlistCountAggregateInputType | true
  }

export interface WishlistDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wishlist'], meta: { name: 'Wishlist' } }
  /**
   * Find zero or one Wishlist that matches the filter.
   * @param {WishlistFindUniqueArgs} args - Arguments to find a Wishlist
   * @example
   * // Get one Wishlist
   * const wishlist = await prisma.wishlist.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WishlistFindUniqueArgs>(args: Prisma.SelectSubset<T, WishlistFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WishlistClient<runtime.Types.Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Wishlist that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WishlistFindUniqueOrThrowArgs} args - Arguments to find a Wishlist
   * @example
   * // Get one Wishlist
   * const wishlist = await prisma.wishlist.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WishlistFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WishlistFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WishlistClient<runtime.Types.Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Wishlist that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WishlistFindFirstArgs} args - Arguments to find a Wishlist
   * @example
   * // Get one Wishlist
   * const wishlist = await prisma.wishlist.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WishlistFindFirstArgs>(args?: Prisma.SelectSubset<T, WishlistFindFirstArgs<ExtArgs>>): Prisma.Prisma__WishlistClient<runtime.Types.Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Wishlist that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WishlistFindFirstOrThrowArgs} args - Arguments to find a Wishlist
   * @example
   * // Get one Wishlist
   * const wishlist = await prisma.wishlist.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WishlistFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WishlistFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WishlistClient<runtime.Types.Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Wishlists that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WishlistFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Wishlists
   * const wishlists = await prisma.wishlist.findMany()
   * 
   * // Get first 10 Wishlists
   * const wishlists = await prisma.wishlist.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const wishlistWithIdOnly = await prisma.wishlist.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WishlistFindManyArgs>(args?: Prisma.SelectSubset<T, WishlistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Wishlist.
   * @param {WishlistCreateArgs} args - Arguments to create a Wishlist.
   * @example
   * // Create one Wishlist
   * const Wishlist = await prisma.wishlist.create({
   *   data: {
   *     // ... data to create a Wishlist
   *   }
   * })
   * 
   */
  create<T extends WishlistCreateArgs>(args: Prisma.SelectSubset<T, WishlistCreateArgs<ExtArgs>>): Prisma.Prisma__WishlistClient<runtime.Types.Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Wishlists.
   * @param {WishlistCreateManyArgs} args - Arguments to create many Wishlists.
   * @example
   * // Create many Wishlists
   * const wishlist = await prisma.wishlist.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WishlistCreateManyArgs>(args?: Prisma.SelectSubset<T, WishlistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Wishlists and returns the data saved in the database.
   * @param {WishlistCreateManyAndReturnArgs} args - Arguments to create many Wishlists.
   * @example
   * // Create many Wishlists
   * const wishlist = await prisma.wishlist.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Wishlists and only return the `id`
   * const wishlistWithIdOnly = await prisma.wishlist.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WishlistCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WishlistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Wishlist.
   * @param {WishlistDeleteArgs} args - Arguments to delete one Wishlist.
   * @example
   * // Delete one Wishlist
   * const Wishlist = await prisma.wishlist.delete({
   *   where: {
   *     // ... filter to delete one Wishlist
   *   }
   * })
   * 
   */
  delete<T extends WishlistDeleteArgs>(args: Prisma.SelectSubset<T, WishlistDeleteArgs<ExtArgs>>): Prisma.Prisma__WishlistClient<runtime.Types.Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Wishlist.
   * @param {WishlistUpdateArgs} args - Arguments to update one Wishlist.
   * @example
   * // Update one Wishlist
   * const wishlist = await prisma.wishlist.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WishlistUpdateArgs>(args: Prisma.SelectSubset<T, WishlistUpdateArgs<ExtArgs>>): Prisma.Prisma__WishlistClient<runtime.Types.Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Wishlists.
   * @param {WishlistDeleteManyArgs} args - Arguments to filter Wishlists to delete.
   * @example
   * // Delete a few Wishlists
   * const { count } = await prisma.wishlist.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WishlistDeleteManyArgs>(args?: Prisma.SelectSubset<T, WishlistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Wishlists.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WishlistUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Wishlists
   * const wishlist = await prisma.wishlist.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WishlistUpdateManyArgs>(args: Prisma.SelectSubset<T, WishlistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Wishlists and returns the data updated in the database.
   * @param {WishlistUpdateManyAndReturnArgs} args - Arguments to update many Wishlists.
   * @example
   * // Update many Wishlists
   * const wishlist = await prisma.wishlist.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Wishlists and only return the `id`
   * const wishlistWithIdOnly = await prisma.wishlist.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WishlistUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WishlistUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Wishlist.
   * @param {WishlistUpsertArgs} args - Arguments to update or create a Wishlist.
   * @example
   * // Update or create a Wishlist
   * const wishlist = await prisma.wishlist.upsert({
   *   create: {
   *     // ... data to create a Wishlist
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Wishlist we want to update
   *   }
   * })
   */
  upsert<T extends WishlistUpsertArgs>(args: Prisma.SelectSubset<T, WishlistUpsertArgs<ExtArgs>>): Prisma.Prisma__WishlistClient<runtime.Types.Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Wishlists.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WishlistCountArgs} args - Arguments to filter Wishlists to count.
   * @example
   * // Count the number of Wishlists
   * const count = await prisma.wishlist.count({
   *   where: {
   *     // ... the filter for the Wishlists we want to count
   *   }
   * })
  **/
  count<T extends WishlistCountArgs>(
    args?: Prisma.Subset<T, WishlistCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WishlistCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Wishlist.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WishlistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WishlistAggregateArgs>(args: Prisma.Subset<T, WishlistAggregateArgs>): Prisma.PrismaPromise<GetWishlistAggregateType<T>>

  /**
   * Group by Wishlist.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WishlistGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WishlistGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WishlistGroupByArgs['orderBy'] }
      : { orderBy?: WishlistGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WishlistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWishlistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Wishlist model
 */
readonly fields: WishlistFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Wishlist.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WishlistClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  jewerlyAsset<T extends Prisma.JewerlyAssetDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.JewerlyAssetDefaultArgs<ExtArgs>>): Prisma.Prisma__JewerlyAssetClient<runtime.Types.Result.GetResult<Prisma.$JewerlyAssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Wishlist model
 */
export interface WishlistFieldRefs {
  readonly id: Prisma.FieldRef<"Wishlist", 'String'>
  readonly userId: Prisma.FieldRef<"Wishlist", 'String'>
  readonly jewerlyAssetId: Prisma.FieldRef<"Wishlist", 'String'>
  readonly created_at: Prisma.FieldRef<"Wishlist", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Wishlist findUnique
 */
export type WishlistFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wishlist
   */
  select?: Prisma.WishlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wishlist
   */
  omit?: Prisma.WishlistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishlistInclude<ExtArgs> | null
  /**
   * Filter, which Wishlist to fetch.
   */
  where: Prisma.WishlistWhereUniqueInput
}

/**
 * Wishlist findUniqueOrThrow
 */
export type WishlistFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wishlist
   */
  select?: Prisma.WishlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wishlist
   */
  omit?: Prisma.WishlistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishlistInclude<ExtArgs> | null
  /**
   * Filter, which Wishlist to fetch.
   */
  where: Prisma.WishlistWhereUniqueInput
}

/**
 * Wishlist findFirst
 */
export type WishlistFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wishlist
   */
  select?: Prisma.WishlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wishlist
   */
  omit?: Prisma.WishlistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishlistInclude<ExtArgs> | null
  /**
   * Filter, which Wishlist to fetch.
   */
  where?: Prisma.WishlistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Wishlists to fetch.
   */
  orderBy?: Prisma.WishlistOrderByWithRelationInput | Prisma.WishlistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Wishlists.
   */
  cursor?: Prisma.WishlistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Wishlists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Wishlists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Wishlists.
   */
  distinct?: Prisma.WishlistScalarFieldEnum | Prisma.WishlistScalarFieldEnum[]
}

/**
 * Wishlist findFirstOrThrow
 */
export type WishlistFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wishlist
   */
  select?: Prisma.WishlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wishlist
   */
  omit?: Prisma.WishlistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishlistInclude<ExtArgs> | null
  /**
   * Filter, which Wishlist to fetch.
   */
  where?: Prisma.WishlistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Wishlists to fetch.
   */
  orderBy?: Prisma.WishlistOrderByWithRelationInput | Prisma.WishlistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Wishlists.
   */
  cursor?: Prisma.WishlistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Wishlists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Wishlists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Wishlists.
   */
  distinct?: Prisma.WishlistScalarFieldEnum | Prisma.WishlistScalarFieldEnum[]
}

/**
 * Wishlist findMany
 */
export type WishlistFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wishlist
   */
  select?: Prisma.WishlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wishlist
   */
  omit?: Prisma.WishlistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishlistInclude<ExtArgs> | null
  /**
   * Filter, which Wishlists to fetch.
   */
  where?: Prisma.WishlistWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Wishlists to fetch.
   */
  orderBy?: Prisma.WishlistOrderByWithRelationInput | Prisma.WishlistOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Wishlists.
   */
  cursor?: Prisma.WishlistWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Wishlists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Wishlists.
   */
  skip?: number
  distinct?: Prisma.WishlistScalarFieldEnum | Prisma.WishlistScalarFieldEnum[]
}

/**
 * Wishlist create
 */
export type WishlistCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wishlist
   */
  select?: Prisma.WishlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wishlist
   */
  omit?: Prisma.WishlistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishlistInclude<ExtArgs> | null
  /**
   * The data needed to create a Wishlist.
   */
  data: Prisma.XOR<Prisma.WishlistCreateInput, Prisma.WishlistUncheckedCreateInput>
}

/**
 * Wishlist createMany
 */
export type WishlistCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Wishlists.
   */
  data: Prisma.WishlistCreateManyInput | Prisma.WishlistCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Wishlist createManyAndReturn
 */
export type WishlistCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wishlist
   */
  select?: Prisma.WishlistSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Wishlist
   */
  omit?: Prisma.WishlistOmit<ExtArgs> | null
  /**
   * The data used to create many Wishlists.
   */
  data: Prisma.WishlistCreateManyInput | Prisma.WishlistCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishlistIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Wishlist update
 */
export type WishlistUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wishlist
   */
  select?: Prisma.WishlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wishlist
   */
  omit?: Prisma.WishlistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishlistInclude<ExtArgs> | null
  /**
   * The data needed to update a Wishlist.
   */
  data: Prisma.XOR<Prisma.WishlistUpdateInput, Prisma.WishlistUncheckedUpdateInput>
  /**
   * Choose, which Wishlist to update.
   */
  where: Prisma.WishlistWhereUniqueInput
}

/**
 * Wishlist updateMany
 */
export type WishlistUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Wishlists.
   */
  data: Prisma.XOR<Prisma.WishlistUpdateManyMutationInput, Prisma.WishlistUncheckedUpdateManyInput>
  /**
   * Filter which Wishlists to update
   */
  where?: Prisma.WishlistWhereInput
  /**
   * Limit how many Wishlists to update.
   */
  limit?: number
}

/**
 * Wishlist updateManyAndReturn
 */
export type WishlistUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wishlist
   */
  select?: Prisma.WishlistSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Wishlist
   */
  omit?: Prisma.WishlistOmit<ExtArgs> | null
  /**
   * The data used to update Wishlists.
   */
  data: Prisma.XOR<Prisma.WishlistUpdateManyMutationInput, Prisma.WishlistUncheckedUpdateManyInput>
  /**
   * Filter which Wishlists to update
   */
  where?: Prisma.WishlistWhereInput
  /**
   * Limit how many Wishlists to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishlistIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Wishlist upsert
 */
export type WishlistUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wishlist
   */
  select?: Prisma.WishlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wishlist
   */
  omit?: Prisma.WishlistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishlistInclude<ExtArgs> | null
  /**
   * The filter to search for the Wishlist to update in case it exists.
   */
  where: Prisma.WishlistWhereUniqueInput
  /**
   * In case the Wishlist found by the `where` argument doesn't exist, create a new Wishlist with this data.
   */
  create: Prisma.XOR<Prisma.WishlistCreateInput, Prisma.WishlistUncheckedCreateInput>
  /**
   * In case the Wishlist was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WishlistUpdateInput, Prisma.WishlistUncheckedUpdateInput>
}

/**
 * Wishlist delete
 */
export type WishlistDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wishlist
   */
  select?: Prisma.WishlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wishlist
   */
  omit?: Prisma.WishlistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishlistInclude<ExtArgs> | null
  /**
   * Filter which Wishlist to delete.
   */
  where: Prisma.WishlistWhereUniqueInput
}

/**
 * Wishlist deleteMany
 */
export type WishlistDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Wishlists to delete
   */
  where?: Prisma.WishlistWhereInput
  /**
   * Limit how many Wishlists to delete.
   */
  limit?: number
}

/**
 * Wishlist without action
 */
export type WishlistDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wishlist
   */
  select?: Prisma.WishlistSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wishlist
   */
  omit?: Prisma.WishlistOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishlistInclude<ExtArgs> | null
}
